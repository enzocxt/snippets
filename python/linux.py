

"""
进程 -> 虚拟地址空间 -> 物理地址空间
虚拟地址空间 -> 物理地址空间 由底层的内核来帮你实现

在 Linux 内核内，进程是由相当大的一个称为 task_struct 数据结构表示的
其中包含 mm 和 active_mm 两个字段
mm 代表的时进程的内存描述符
active_mm 代表前一个进程的内存描述符 （为改进上下文切换时间的一种优化）

进程在地址空间上的表现形式主要：代码段，数据段，堆，栈
父进程创建子进程时：
子进程正文段 -> 父进程代码段，不复制到具体的物理空间
而其它三个，通常要复制到新开辟的物理空间
所以子进程通常由自己的数据段和堆栈，而与父进程共享代码段

写时复制（copy-on-write）：
内核只为新生成的子进程创建虚拟空间结构，它们复制与父进程的虚拟空间结构，
但是不为这些段分配物理内存，它们共享父进程的物理空间，
当父或子进程中有更改相应段的行为发生时，再为子进程相应的段分配物理空间。

exec 系统调用：
"""
